import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import '@testing-library/jest-dom';
import App from './App';

// Mock fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
global.fetch = jest.fn();

// Mock alert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
global.alert = jest.fn();

describe('App Component', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  test('renders header with title', async () => {
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('üìö –°–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –∫–Ω–∏–≥–∞–º–∏')).toBeInTheDocument();
    });
  });

  test('renders "–ú–æ–∏ –∫–Ω–∏–≥–∏" button', async () => {
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('–ú–æ–∏ –∫–Ω–∏–≥–∏')).toBeInTheDocument();
    });
  });

  test('renders "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É" button', async () => {
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É')).toBeInTheDocument();
    });
  });

  test('shows loading state initially', () => {
    // –ù–µ –º–æ–∫–∞–µ–º fetch, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    render(<App />);
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞...')).toBeInTheDocument();
  });

  test('displays books after successful API call', async () => {
    const mockBooks = [
      {
        id: 1,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞',
        author: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä',
        year: 2024,
        description: '–û–ø–∏—Å–∞–Ω–∏–µ',
        user_id: null,
        point_id: 1
      }
    ];

    const mockPoints = [
      { id: 1, address: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞' }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockBooks
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockPoints
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞')).toBeInTheDocument();
    });
  });

  test('shows error message when API call fails', async () => {
    fetch.mockRejectedValueOnce(new Error('API Error'));

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
    });
  });

  test('opens add book form when button is clicked', async () => {
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const addButton = screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É');
      fireEvent.click(addButton);
    });
    
    expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–Ω–∏–≥—É')).toBeInTheDocument();
  });

  test('switches to "–ú–æ–∏ –∫–Ω–∏–≥–∏" view when button is clicked', async () => {
    const mockMyBooks = [
      {
        id: 1,
        title: '–ú–æ—è –∫–Ω–∏–≥–∞',
        author: '–ú–æ–π –∞–≤—Ç–æ—Ä',
        year: 2024,
        user_id: null,
        added_by: 'user_1'
      }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockMyBooks
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const myBooksButton = screen.getByText('–ú–æ–∏ –∫–Ω–∏–≥–∏');
      fireEvent.click(myBooksButton);
    });

    await waitFor(() => {
      expect(screen.getByText('–ú–æ—è –∫–Ω–∏–≥–∞')).toBeInTheDocument();
    });
  });

  test('renders admin button', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      expect(screen.getByText('üîê –ê–¥–º–∏–Ω')).toBeInTheDocument();
    });
  });

  test('opens admin login form when admin button is clicked', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const adminButton = screen.getByText('üîê –ê–¥–º–∏–Ω');
      fireEvent.click(adminButton);
    });

    expect(screen.getByText('üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')).toBeInTheDocument();
  });

  test('successful admin login', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => ({ message: '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', token: 'admin_token_123' })
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const adminButton = screen.getByText('üîê –ê–¥–º–∏–Ω');
      fireEvent.click(adminButton);
    });

    const passwordInput = screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
    const loginButton = screen.getByText('–í–æ–π—Ç–∏');

    await act(async () => {
      fireEvent.change(passwordInput, { target: { value: 'admin' } });
      fireEvent.click(loginButton);
    });

    await waitFor(() => {
      expect(screen.getByText('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')).toBeInTheDocument();
    });
  });

  test('failed admin login', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: false,
        status: 401
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const adminButton = screen.getByText('üîê –ê–¥–º–∏–Ω');
      fireEvent.click(adminButton);
    });

    const passwordInput = screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
    const loginButton = screen.getByText('–í–æ–π—Ç–∏');

    await act(async () => {
      fireEvent.change(passwordInput, { target: { value: 'wrong_password' } });
      fireEvent.click(loginButton);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ –≤–∏–¥–Ω–∞ (–Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å)
    expect(screen.getByText('üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')).toBeInTheDocument();
  });

  test('admin logout', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => ({ message: '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', token: 'admin_token_123' })
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const adminButton = screen.getByText('üîê –ê–¥–º–∏–Ω');
      fireEvent.click(adminButton);
    });

    const passwordInput = screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
    const loginButton = screen.getByText('–í–æ–π—Ç–∏');

    await act(async () => {
      fireEvent.change(passwordInput, { target: { value: 'admin' } });
      fireEvent.click(loginButton);
    });

    await waitFor(() => {
      const logoutButton = screen.getByText('üö™ –í—ã—Ö–æ–¥');
      fireEvent.click(logoutButton);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏—Å—á–µ–∑–ª–∞
    expect(screen.queryByText('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')).not.toBeInTheDocument();
  });

  test('add book form functionality', async () => {
    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => [{ id: 1, address: '–¢–æ—á–∫–∞ 1' }]
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => ({ message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', book_id: 1 })
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const addButton = screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É');
      fireEvent.click(addButton);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–Ω–∏–≥—É')).toBeInTheDocument();
    expect(screen.getByText('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ *:')).toBeInTheDocument();
    expect(screen.getByText('–ê–≤—Ç–æ—Ä *:')).toBeInTheDocument();
    expect(screen.getByText('–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è *:')).toBeInTheDocument();
    expect(screen.getByText('–¢–æ—á–∫–∞ –æ–±–º–µ–Ω–∞ *:')).toBeInTheDocument();
  });

  test('take book functionality', async () => {
    const mockBooks = [
      {
        id: 1,
        title: '–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–Ω–∏–≥–∞',
        author: '–ê–≤—Ç–æ—Ä',
        year: 2024,
        user_id: null,
        point_id: 1
      }
    ];

    const mockUpdatedBooks = [
      {
        id: 1,
        title: '–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–Ω–∏–≥–∞',
        author: '–ê–≤—Ç–æ—Ä',
        year: 2024,
        user_id: 'user_1', // –ö–Ω–∏–≥–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–±—Ä–∞–Ω–∞
        point_id: 1
      }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockBooks
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => [{ id: 1, address: '–¢–æ—á–∫–∞ 1' }]
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => ({ message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω–∞' })
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockUpdatedBooks
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const takeButton = screen.getByText('–ó–∞–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É');
      fireEvent.click(takeButton);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–ª–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–Ω–∏–≥–∏
    await waitFor(() => {
      expect(screen.queryByText('–ó–∞–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É')).not.toBeInTheDocument();
    });
  });

  test('filter functionality', async () => {
    const mockBooks = [
      {
        id: 1,
        title: '–ö–Ω–∏–≥–∞ 1',
        author: '–ê–≤—Ç–æ—Ä 1',
        year: 2020,
        point_id: 1
      },
      {
        id: 2,
        title: '–ö–Ω–∏–≥–∞ 2',
        author: '–ê–≤—Ç–æ—Ä 2',
        year: 2021,
        point_id: 2
      }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockBooks
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => [{ id: 1, address: '–¢–æ—á–∫–∞ 1' }, { id: 2, address: '–¢–æ—á–∫–∞ 2' }]
      });

    await act(async () => {
      render(<App />);
    });

    await waitFor(() => {
      const authorFilter = screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞');
      const applyButton = screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å');
      
      fireEvent.change(authorFilter, { target: { value: '–ê–≤—Ç–æ—Ä 1' } });
      fireEvent.click(applyButton);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
    expect(screen.getByDisplayValue('–ê–≤—Ç–æ—Ä 1')).toBeInTheDocument();
  });
}); 