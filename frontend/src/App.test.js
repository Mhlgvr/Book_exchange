import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import App from './App';

// Mock fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
global.fetch = jest.fn();

describe('App Component', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  test('renders header with title', () => {
    render(<App />);
    expect(screen.getByText('üìö –°–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –∫–Ω–∏–≥–∞–º–∏')).toBeInTheDocument();
  });

  test('renders "–ú–æ–∏ –∫–Ω–∏–≥–∏" button', () => {
    render(<App />);
    expect(screen.getByText('–ú–æ–∏ –∫–Ω–∏–≥–∏')).toBeInTheDocument();
  });

  test('renders "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É" button', () => {
    render(<App />);
    expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É')).toBeInTheDocument();
  });

  test('shows loading state initially', () => {
    render(<App />);
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞...')).toBeInTheDocument();
  });

  test('displays books after successful API call', async () => {
    const mockBooks = [
      {
        id: 1,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞',
        author: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä',
        year: 2024,
        description: '–û–ø–∏—Å–∞–Ω–∏–µ',
        user_id: null,
        point_id: 1
      }
    ];

    const mockPoints = [
      { id: 1, address: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞' }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockBooks
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockPoints
      });

    render(<App />);

    await waitFor(() => {
      expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞')).toBeInTheDocument();
    });
  });

  test('shows error message when API call fails', async () => {
    fetch.mockRejectedValueOnce(new Error('API Error'));

    render(<App />);

    await waitFor(() => {
      expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
    });
  });

  test('opens add book form when button is clicked', () => {
    render(<App />);
    
    const addButton = screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É');
    fireEvent.click(addButton);
    
    expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–Ω–∏–≥—É')).toBeInTheDocument();
  });

  test('switches to "–ú–æ–∏ –∫–Ω–∏–≥–∏" view when button is clicked', async () => {
    const mockMyBooks = [
      {
        id: 1,
        title: '–ú–æ—è –∫–Ω–∏–≥–∞',
        author: '–ú–æ–π –∞–≤—Ç–æ—Ä',
        year: 2024,
        user_id: null,
        added_by: 'user_1'
      }
    ];

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => []
      })
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockMyBooks
      });

    render(<App />);

    await waitFor(() => {
      const myBooksButton = screen.getByText('–ú–æ–∏ –∫–Ω–∏–≥–∏');
      fireEvent.click(myBooksButton);
    });

    await waitFor(() => {
      expect(screen.getByText('–ú–æ—è –∫–Ω–∏–≥–∞')).toBeInTheDocument();
    });
  });
}); 